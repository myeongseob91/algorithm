..
import java.util.LinkedList;
import java.util.Stack;

//그래프 클래스
public class Graph {
    //그래프는 노드와 아크로 이루어져 있음
    //노드 클래스
    class Node {
        //노드에는 데이터 존재
        int data;
        //추후 bfs , dfs 탐색시에 사용될 마크변수
        //스택이나 큐에 들어간 노드는 다시 담지 않는다
        boolean marked;
        //노드에는 또 다른 노드들이 존재할수있다.
        LinkedList<Node> adjacent;

        //노드 생성자 생성시에 데이터 insert
        Node(int i) {
            this.data = i;
            this.marked = false;
            adjacent = new LinkedList<Node>();
        }
    }

    //그래프는 여러개의 노드를 가지고있다.
    Node[] nodes;
    //그래프 생성자 (몇개의 노드를 생성할지)
    Graph(int size) {
        nodes =  new Node[size];

        for (int i = 0; i < size; i++) {
            nodes[i] = new Node(i);
        }

    }
    //그래프 에서 노드간에 아크를 연결하는 메소드
    void addEdge(int i1, int i2) {
        Node n1 = nodes[i1];
        Node n2 = nodes[i2];

        if(!n1.adjacent.contains(n2)){

            n1.adjacent.push(n2);
        }
        if(!n2.adjacent.contains(n1)){

            n2.adjacent.push(n1);
        }
    }

    //탐색
    void dfs(){
        dfs(0);
    }

    void dfs(int index){
        Node root = nodes[index];
        Stack<Node> stack = new Stack<Node>();
        stack.push(root);
        root.marked = true;
        while(!stack.isEmpty()){
            Node r = stack.pop();
            for(Node n : r.adjacent){
                if(n.marked == false){
                    n.marked = true;
                    stack.push(n);
                }
            }
            visit(r);
        }
    }

    void visit(Node node){
        System.out.println(" "+node.data);
    }

    public static void main(String[] args) {
        Graph graph = new Graph(9);
        graph.addEdge(0,1);
        graph.addEdge(1,2);
        graph.addEdge(1,3);
        graph.addEdge(2,4);
        graph.addEdge(2,3);
        graph.addEdge(3,4);
        graph.addEdge(3,5);
        graph.addEdge(5,6);
        graph.addEdge(5,7);
        graph.addEdge(6,8);

        graph.dfs();

    }

}








