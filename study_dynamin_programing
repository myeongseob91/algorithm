RobotInAGrid

import java.util.ArrayList;



    //경유하는 점들을 리턴해줘야 하기 때문에 포인트 클래스를 만든다
   class Point {
        int row, col;
        Point(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }

    class Solution {
        //grid 는 true 면 아무것도 없는 칸 false 면 블락된
       public ArrayList<Point> findPath(boolean[][] grid) {

           //함수 에서 데이터를 받으면 가장 먼저 할 것은 널체크
           if (grid == null || grid.length == 0) return null;

           //패스를 저장할 리스트
           ArrayList<Point> path = new ArrayList<>();

           //인자는 그리드와 처음시작점과 리턴될 경
           if (findPath(grid, grid.length - 1, grid[0].length - 1, path))
               return path;
               //만약에 재귀함수에서 받은 결과가 false 면 둘이 만나는 path 가 없다는 것이니까 null 을 반환. ?
           else return null;
       }
       //재귀함수
       private boolean findPath(boolean[][] grid, int row, int col,ArrayList<Point> path) {
           //그리드의 밖이거나 블락된 칸일경
           if(!isRange(grid ,row, col) || grid[row][col]) return false;
           if((row == 0 && col == 0)
                   ||findPath(grid, row, col - 1, path)
                   ||findPath(grid, row - 1, col, path)){
                //경로를 찾은거니
                Point point = new Point(row,col);
                path.add(point);
                return true;
           }
           return false;
       }
       //받은 row와 col이 grid 안에 있는지 확
       private boolean isRange(boolean[][] grid, int row, int col) {
           return row >= 0 && row <= grid.length - 1
                   && col >= 0 && col <= grid[row].length - 1;
       }



    }

public class RobotInAGrid {

    public static void main(String[] args) {
        boolean [][] grid = {
            {false, false, false, false},
            {false, false, false, true},
            {true, true, false, false},
            {false, false, false, false}
        };

        Solution sol = new Solution();
        ArrayList<Point> path = sol.findPath(grid);
        if(path != null)
            for (Point p : path) {
                System.out.print(p.row + "" + p.col  + " -> ");
            }
    }
}


//
혼자서 코딩 성공

import java.util.ArrayList;

    //경유하는 점들을 리턴해줘야 하기 때문에 포인트 클래스를 만든다
   class Point {
        int row, col;
        Point(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }

    class Solution {
        //grid 는 true 면 아무것도 없는 칸 false 면 블락된
       public ArrayList<Point> findPath(boolean[][] grid) {

           //함수 에서 데이터를 받으면 가장 먼저 할 것은 널체크
           if (grid == null || grid.length == 0) return null;

           //패스를 저장할 리스트
           ArrayList<Point> path = new ArrayList<>();

           //인자는 그리드와 처음시작점과 리턴될 경
           if (findPath(grid, grid.length - 1, grid[0].length - 1, path))
               return path;
               //만약에 재귀함수에서 받은 결과가 false 면 둘이 만나는 path 가 없다는 것이니까 null 을 반환. ?
           else return null;
       }
       //재귀함수
       private boolean findPath(boolean[][] grid, int row, int col,ArrayList<Point> path) {
           //그리드의 밖이거나 블락된 칸일경
           if(!isRange(grid ,row, col) || grid[row][col]) return false;
           if((row == 0 && col == 0)
                   ||findPath(grid, row, col - 1, path)
                   ||findPath(grid, row - 1, col, path)){
                //경로를 찾은거니
                Point point = new Point(row,col);
                path.add(point);
                return true;
           }
           return false;
       }
       //받은 row와 col이 grid 안에 있는지 확
       private boolean isRange(boolean[][] grid, int row, int col) {
           return row >= 0 && row <= grid.length - 1
                   && col >= 0 && col <= grid[row].length - 1;
       }



    }

public class RobotInAGrid {

    public static void main(String[] args) {
        boolean [][] grid = {
            {false, false, false, false},
            {false, false, false, true},
            {true, true, false, false},
            {false, false, false, false}
        };

        Solution sol = new Solution();
        ArrayList<Point> path = sol.findPath(grid);
        if(path != null)
            for (Point p : path) {
                System.out.print(p.row + "" + p.col  + " -> ");
            }
    }
}
